class Node{
    constructor(name){
        this.name = name;
        this.X = -1;
        this.Y = 0;
    }
}

function getRoles(processNode) {
    var roles = [];

    var role_relationships = $("assignment-relationship").filter(function(rel) {
        return rel.target.name === processNode.name;
    });

    role_relationships.forEach(function(rel) {
        if (rel.source.type === "business-role") {
            roles.push(new Node(rel.source.name));
        }
    });
    return roles;
}

function getActors(roles) {
    var role_actors = new Map();

    role_names = roles.map(function(role) {
        return role.name;
    });

    roles.forEach(function(role) {
        role_actors.set(role.name, []);
    });

    var actor_relationships = $("assignment-relationship").filter(function(rel) {
        return (rel.target.type === "business-role") && (role_names.includes(rel.target.name));
    });

    actor_relationships.forEach(function(rel) {
        if (role_actors.has(rel.target.name)) {
            var actor_list = role_actors.get(rel.target.name);
            actor_list.push(new Node(rel.source.name));
            role_actors.set(rel.target.name, actor_list);
        }
    });

    let keys = Array.from(role_actors.keys());
    var count = 0;

    keys.forEach(function(key) {
        role_actors.get(key).forEach(function(actor) {
            actor.X = count;
            count++;
        });
    });

    return role_actors;
}

function calculateRoleX(roles, role_actors) {
    roles.forEach(function(role) {
        var actors = role_actors.get(role.name);
        role.X = (actors[actors.length - 1].X + actors[0].X) / 2;
        role.Y = 1;
    });
}

function getProcesses() {
    var processes = [];
    business_processes = $("business-process");
    business_processes.forEach(function(process) {
        var node = new Node(process.name);
        node.Y = 2;
        processes.push(node);
    });
    return processes;
}

function calculateProcessX(process, role_actors) {
    var roles = Array.from(role_actors.keys());
    actors = role_actors.get(roles[roles.length - 1]);
    process.X = actors[actors.length - 1].X/2;
}

function getApplications(process) {
    var applications = [];

    var application_relationships = $("serving-relationship").filter(function(rel) {
        return rel.target.name === process.name;
    });

    application_relationships.forEach(function(rel) {
        console.log(rel.source.type);
        if (rel.source.type === "application-component") {
            var node = new Node(rel.source.name);
            node.Y = 3;
            applications.push(node);
        }
    });

    var firstX =  process.X - (applications.length - 1) /2;
    console.log("X =" + firstX);
    console.log("Length =" + applications.length);
    applications.forEach(function(app) {
        app.X = firstX;
        firstX++;
    });

    return applications;
}

function getRelations(process, applications, role_actors) {
    var relations = [];

    var application_relationships = $("serving-relationship").filter(function(rel) {
        return rel.target.name === process.name;
    });

    var role_relationships = $("assignment-relationship").filter(function(rel) {
        return rel.target.name === process.name;
    });


    var roles = Array.from(role_actors.keys());

    var actor_relationships = $("assignment-relationship").filter(function(rel) {
        return roles.includes(rel.target.name);
    });

    application_relationships.forEach(function(rel) {
        relations.push(rel);
    });

    role_relationships.forEach(function(rel) {
        relations.push(rel);
    });

    actor_relationships.forEach(function(rel) {
        relations.push(rel);
    });

    relations.forEach(function(rel) {
        console.log(rel.source.name + " " + rel.target.name);
    });

    return relations;
}

function getLowestX(process, applications, roles, role_actors) {
    var lowest = process.X;
    applications.forEach(function(app) {
        if (app.X < lowest) {
            lowest = app.X;
        }
    });

    roles.forEach(function(role) {
        if (role.X < lowest) {
            lowest = role.X;
        }
    });

    let keys = Array.from(role_actors.keys());
    keys.forEach(function(key) {
        role_actors.get(key).forEach(function(actor) {
            if (actor.X < lowest) {
                lowest = actor.X;
            }
        });
    });

    if (process.X < lowest) {
        lowest = process.X;
    }

    return lowest;
}

function shiftX(process, applications, roles, role_actors, xDistance) {
    process.X += xDistance;
    applications.forEach(function(app) {
        app.X += xDistance;
    });

    roles.forEach(function(role) {
        role.X += xDistance;
    });

    let keys = Array.from(role_actors.keys());
    keys.forEach(function(key) {
        role_actors.get(key).forEach(function(actor) {
            actor.X += xDistance;
        });
    });
}

function drawDiagram(process, applications, roles, role_actors, relationships, xDistance, yDistance, view) {
    var relation;

    process_object = $("business-process").filter(function(el) {return el.name === process.name})[0];

    var process_element = view.add(process_object, process.X*xDistance, process.Y*yDistance, -1, -1);

    

    applications.forEach(function(app) {
        var app_object = $("application-component").filter(function(el) {return el.name === app.name})[0];
        var app_element = view.add(app_object, app.X*xDistance, app.Y*yDistance, -1, -1);
        
        relation = relationships.filter(function(rel) {
            return rel.source.name === app_object.name && rel.target.name === process_object.name;
        })[0];
        view.add(relation, app_element, process_element);
    });
    console.log(roles.length);
    roles.forEach(function(role) {
        var actors = role_actors.get(role.name);
        var role_object = $("business-role").filter(function(el) {return el.name === role.name})[0];

        var role_element = view.add(role_object, role.X*xDistance, role.Y*yDistance, -1, -1);

        relation = relationships.filter(function(rel) {
            return rel.source.name === role_object.name && rel.target.name === process_object.name;
        })[0];

        view.add(relation, role_element, process_element);

        actors.forEach(function(actor) {
            var actor_object = $("business-actor").filter(function(el) {return el.name === actor.name})[0];
            var actor_element = view.add(actor_object, actor.X*xDistance, actor.Y*yDistance, -1, -1);
            relation = relationships.filter(function(rel) {
                return rel.source.name === actor_object.name && rel.target.name === role_object.name;
            })[0];
            view.add(relation, actor_element, role_element);
        });
    });
}

function drawViewPerProcess(processes, folderName) {
    var xDistance = 150;
    var yDistance = 120;

    var VFolder = $("folder.Views").first(); // Find folder called "Views" 
    var folder = VFolder.createFolder(folderName); // Create a sub-folder

    processes.forEach(function(process) {
        var roles = getRoles(process);
        if (roles.length != 0) {
        
            var role_actors = getActors(roles);
            calculateRoleX(roles, role_actors);
            calculateProcessX(process, role_actors);
            var applications = getApplications(process);
            var relationships = getRelations(process, applications, role_actors);
            var lowestX = getLowestX(process, applications, roles, role_actors);
            if(lowestX < 0){
                shiftX(process, applications, roles, role_actors, -lowestX);
            }
            var view = model.createArchimateView(process.name, folder);
            drawDiagram(process, applications, roles, role_actors, relationships, xDistance, yDistance, view);
        }
    });
}

function drawBusinessFootprintDiagram() {
    var processes = getProcesses();
    drawViewPerProcess(processes, "Business Footprint Diagrams");
}

drawBusinessFootprintDiagram();